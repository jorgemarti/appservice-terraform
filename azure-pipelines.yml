# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
- repo: self

stages:
- stage: Validate
  jobs:
  - job: Validate
    continueOnError: false
    variables:
    - group: configurations
    steps:
    - publish: .
      artifact: terraform_out
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use Terraform v0.12.18'
      inputs:
        terraformVersion: 0.12.18
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        backendType: azurerm
        backendServiceArm: '$(azurespn)'
        backendAzureRmResourceGroupName: 'AksPrerreq-RG'
        backendAzureRmStorageAccountName: 'jorgemartiterraform'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'appservice.terraform.tfstate'
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform validate'
      inputs:
        command: validate
- stage: Deployment
  dependsOn: Validate
  jobs:
    # track deployments on the environment
  - deployment: Deploy_Terraform  
    variables:
    - group: configurations
    # creates an environment if it doesnâ€™t exist
    environment: 'PROD'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
          # - download: current
          #   artifact: terraform_out
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: 'Use Terraform v0.12.18'
            inputs:
              terraformVersion: 0.12.18
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: 'terraform init'
            inputs:
              command: init
              workingDirectory: $(Pipeline.Workspace)/terraform_out
              backendType: azurerm
              backendServiceArm: '$(azurespn)'
              backendAzureRmResourceGroupName: 'AksPrerreq-RG'
              backendAzureRmStorageAccountName: 'jorgemartiterraform'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'appservice.terraform.tfstate'
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: 'terraform plan'
            inputs:
              command: plan
              workingDirectory: $(Pipeline.Workspace)/terraform_out
              environmentServiceName: '$(azurespn)'
              commandOptions: '-out $(Pipeline.Workspace)/terraform_out/terraform_appservice_out'
              terraformVersion: 0.12.18
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: 'terraform apply'
            inputs:
              command: apply
              workingDirectory: $(Pipeline.Workspace)/terraform_out
              environmentServiceName: '$(azurespn)'
              commandOptions: '$(Pipeline.Workspace)/terraform_out/terraform_appservice_out'